{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/App.svelte",
    "../../src/Timeline.svelte",
    "../../src/Note.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n  import Timeline from \"./Timeline.svelte\";\n  export let name;\n  const handleKeyDown = e => {\n    let key = e.key;\n    console.log(key);\n  };\n  onMount(async () => {\n\n    function onMIDISuccess(midiAccess) {\n      for (var input of midiAccess.inputs.values())\n        input.onmidimessage = getMIDIMessage;\n    }\n\n    function getMIDIMessage(midiMessage) {\n      console.log(midiMessage);\n\t\t}\n\t\ttry{\n\t\tconst midiAccess = await navigator.requestMIDIAccess();\n\t\tonMIDISuccess(midiAccess)\n\n\t\t}catch(e){\n\t\t\tconsole.error(e)\n\t\t}\n\n  });\n</script>\n\n<style>\n  :global(body) {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n    padding: 0;\n    margin: 0;\n  }\n\tmain{\n\t\tdisplay: grid;\n\t\tgrid-template-rows: repeat(auto-fit, minmax(100px,1fr) );\n    height:100%;\n    width:100%;\n\t}\n</style>\n\n<svelte:window on:keydown={handleKeyDown} />\n\n<main>\n  <Timeline measures={24} freq={880} />\n  <Timeline measures={24} freq={742.5} />\n  <Timeline measures={24} freq={660} />\n  <Timeline measures={24} freq={556.875} />\n  <Timeline measures={24} freq={495} />\n  <Timeline measures={24} freq={440} />\n</main>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import Note from \"./Note.svelte\";\n  export let measures = 12;\n  export let freq = 27;\n  let count = 0;\n  const measureArray = Array.from({ length: measures });\n  onMount(async () => {\n    setInterval(() => {\n      count = (count + 1) % measures;\n    }, 200);\n  });\n</script>\n\n<style>\n  div {\n    text-align: center;\n    margin: 0 auto;\n    background-color: #726b68;\n    height:100%;\n    width:100%;\n    display: grid;\n  }\n</style>\n\n<div style=\"grid-template-columns: repeat({measures}, 1fr);\">\n  {#each measureArray as measure, i}\n    <Note active={i == count} {freq} />\n  {/each}\n</div>\n",
    "<script>\n  export let active = false;\n  let clicked = false;\n  export let freq = 27;\n  let myosc = null;\n  const audioContext = new AudioContext();\n  const masterGainNode = audioContext.createGain();\n  masterGainNode.connect(audioContext.destination);\n  masterGainNode.gain.value = .5;\n\n  // Create the keys; skip any that are sharp or flat; for\n  // our purposes we don't need them. Each octave is inserted\n  // into a <div> of class \"octave\".\n\n  const sineTerms = new Float32Array([0, 0, 1, 0, 1]);\n  const cosineTerms = new Float32Array(sineTerms.length);\n  const customWaveform = audioContext.createPeriodicWave(\n    cosineTerms,\n    sineTerms\n  );\n\n  function playTone(freq) {\n    let osc = audioContext.createOscillator();\n    osc.connect(masterGainNode);\n\n    osc.type='cosine'\n    osc.frequency.value = freq;\n    osc.start();\n    myosc = osc;\n\n  }\n  $: {\n    if (active&&clicked) {\n    playTone(freq);\n\n  }else if(myosc){\n    //myosc.stop()\n  }\n  }\n\n</script>\n\n<style>\n  div {\n    border: 1px solid white;\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div style={active ? 'background-color:#b399d4' : clicked ? 'background-color:#fac282': ''} on:click={()=>clicked = !clicked}/>\n"
  ],
  "names": [],
  "mappings": "AA8BU,IAAI,AAAE,CAAC,AACb,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACX,CAAC,AACF,mBAAI,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,OAAO,QAAQ,CAAC,CAAC,OAAO,KAAK,CAAC,GAAG,CAAC,EAAE,CACtD,OAAO,IAAI,CACX,MAAM,IAAI,AACb,CAAC;AC3BA,GAAG,eAAC,CAAC,AACH,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,gBAAgB,CAAE,OAAO,CACzB,OAAO,IAAI,CACX,MAAM,IAAI,CACV,OAAO,CAAE,IAAI,AACf,CAAC;ACqBD,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC"
}